// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  username           String?
  email              String              @unique
  password           String
  whatsappSessions   WhatsappSession[]
  workflows          Workflow[]
  sendingLists       SendingList[]
  scheduledWorkflows ScheduledWorkflow[]
  userSubscription   UserSubscription?
}

model UserSubscription {
  id                     String    @id @default(uuid())
  subscriptionLevel      String?   @default("FREE")
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String    @unique
}

model WhatsappSession {
  id           String        @id @default(cuid())
  instanceId   String?
  name         String?
  description  String?
  session      String?
  status       String?
  qr           String?
  token        String?
  retries      Int?          @default(0)
  user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?
  chats        Chats[]
  sendingLists SendingList[]
}

model Chats {
  id           String  @id @default(cuid())
  whatsappId   String  @unique
  whatsappName String
  isGroup      Boolean @default(false)

  whatsappSession   WhatsappSession? @relation(fields: [whatsappSessionId], references: [id], onDelete: Cascade)
  whatsappSessionId String?
}

model Workflow {
  id                String              @id @default(cuid())
  title             String
  description       String?
  nodes             String?
  edges             String?
  scheduledWorkflow ScheduledWorkflow[]

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model SendingList {
  id                String              @id @default(cuid())
  name              String
  list              String?
  scheduledWorkflow ScheduledWorkflow[]

  user              User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String?
  whatsappSession   WhatsappSession? @relation(fields: [whatsappSessionId], references: [id], onDelete: Cascade)
  whatsappSessionId String?
}

model ScheduledWorkflow {
  id                String @id @default(cuid())
  startTime         String
  whatsappSessionId String
  status            String @default("SCHEDULED")

  user          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?
  sendingList   SendingList? @relation(fields: [sendingListId], references: [id], onDelete: Cascade)
  sendingListId String?
  workflow      Workflow?    @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId    String?
}
